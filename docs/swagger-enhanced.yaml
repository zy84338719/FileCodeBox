swagger: "2.0"
info:
  title: "FileCodeBox API"
  description: "FileCodeBox 是一个用于文件分享和代码片段管理的 Web 应用程序"
  version: "1.9.8"
  termsOfService: "http://swagger.io/terms/"
  contact:
    name: "API Support"
    url: "http://www.swagger.io/support"
    email: "support@swagger.io"
  license:
    name: "MIT"
    url: "https://github.com/zy84338719/filecodebox/blob/main/LICENSE"

host: "localhost:12345"
basePath: "/"
schemes:
  - "http"
  - "https"

securityDefinitions:
  BearerAuth:
    type: "apiKey"
    name: "Authorization"
    in: "header"
    description: "在请求头中携带 Bearer Token，例如：Authorization: Bearer <token>"
  BasicAuth:
    type: "basic"

tags:
  - name: "系统"
    description: "系统相关接口"
  - name: "分享"
    description: "文件和文本分享接口"
  - name: "分片上传"
    description: "大文件分片上传接口"
  - name: "用户"
    description: "用户认证和管理接口"
  - name: "管理员"
    description: "管理员接口"
  - name: "存储"
    description: "存储管理接口"
  - name: "MCP"
    description: "Model Context Protocol 接口"
  - name: "初始化"
    description: "系统初始化与安装向导接口"

paths:
  # 系统接口
  /health:
    get:
      tags: ["系统"]
      summary: "健康检查"
      description: "检查服务器健康状态"
      produces:
        - "application/json"
      responses:
        200:
          description: "健康状态信息"
          schema:
            type: "object"
            properties:
              status:
                type: "string"
                example: "ok"
              timestamp:
                type: "string"
                example: "2025-09-11T10:00:00Z"
              version:
                type: "string"
                example: "1.9.8"
              uptime:
                type: "string"
                example: "2h30m15s"

  /api/config:
    get:
      tags: ["系统"]
      summary: "获取系统配置"
      description: "获取前端所需的系统配置信息"
      produces:
        - "application/json"
      responses:
        200:
          description: "系统配置信息"
          schema:
            $ref: "#/definitions/SystemConfig"

  /check-init:
    get:
      tags: ["初始化"]
      summary: "检查系统初始化状态"
      description: "返回系统是否已经完成初始化，用于引导 Setup 向导"
      produces:
        - "application/json"
      responses:
        200:
          description: "初始化状态"
          schema:
            $ref: "#/definitions/InitializationStatusResponse"
        500:
          description: "服务器内部错误"
          schema:
            $ref: "#/definitions/ErrorResponse"

  /setup/initialize:
    post:
      tags: ["初始化"]
      summary: "执行系统初始化"
      description: "提交数据库与管理员配置，完成系统初始化流程。未初始化时公开，初始化后需管理员权限。"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "request"
          in: "body"
          required: true
          description: "初始化参数"
          schema:
            $ref: "#/definitions/SetupInitializeRequest"
      responses:
        200:
          description: "初始化成功"
          schema:
            $ref: "#/definitions/SetupInitializeResponse"
        400:
          description: "请求参数错误"
          schema:
            $ref: "#/definitions/ErrorResponse"
        403:
          description: "系统已初始化"
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "服务器内部错误"
          schema:
            $ref: "#/definitions/ErrorResponse"

  /setup:
    post:
      tags: ["初始化"]
      summary: "执行系统初始化（兼容入口）"
      description: "兼容旧版本 Setup 表单的初始化入口，与 /setup/initialize 行为一致"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "request"
          in: "body"
          required: true
          description: "初始化参数"
          schema:
            $ref: "#/definitions/SetupInitializeRequest"
      responses:
        200:
          description: "初始化成功"
          schema:
            $ref: "#/definitions/SetupInitializeResponse"
        400:
          description: "请求参数错误"
          schema:
            $ref: "#/definitions/ErrorResponse"
        403:
          description: "系统已初始化"
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "服务器内部错误"
          schema:
            $ref: "#/definitions/ErrorResponse"

  # 分享接口
  /share/text/:
    post:
      tags: ["分享"]
      summary: "分享文本内容"
      description: "分享文本内容并生成分享代码"
      consumes:
        - "multipart/form-data"
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "text"
          in: "formData"
          type: "string"
          required: true
          description: "文本内容"
        - name: "expire_value"
          in: "formData"
          type: "integer"
          default: 1
          description: "过期值"
        - name: "expire_style"
          in: "formData"
          type: "string"
          enum: ["minute", "hour", "day", "week", "month", "year", "forever"]
          default: "day"
          description: "过期样式"
        - name: "require_auth"
          in: "formData"
          type: "boolean"
          default: false
          description: "是否需要认证"
      responses:
        200:
          description: "分享成功"
          schema:
            $ref: "#/definitions/ShareResponse"
        400:
          description: "请求参数错误"
          schema:
            $ref: "#/definitions/ErrorResponse"
        401:
          description: "认证失败"
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "服务器内部错误"
          schema:
            $ref: "#/definitions/ErrorResponse"

  /share/file/:
    post:
      tags: ["分享"]
      summary: "分享文件"
      description: "上传并分享文件，生成分享代码"
      consumes:
        - "multipart/form-data"
      produces:
        - "application/json"
      parameters:
        - name: "file"
          in: "formData"
          type: "file"
          required: true
          description: "要分享的文件"
        - name: "expire_value"
          in: "formData"
          type: "integer"
          default: 1
          description: "过期值"
        - name: "expire_style"
          in: "formData"
          type: "string"
          enum: ["minute", "hour", "day", "week", "month", "year", "forever"]
          default: "day"
          description: "过期样式"
        - name: "require_auth"
          in: "formData"
          type: "boolean"
          default: false
          description: "是否需要认证"
      responses:
        200:
          description: "分享成功"
          schema:
            $ref: "#/definitions/ShareResponse"
        400:
          description: "请求参数错误"
          schema:
            $ref: "#/definitions/ErrorResponse"
        413:
          description: "文件过大"
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "服务器内部错误"
          schema:
            $ref: "#/definitions/ErrorResponse"

  /share/select/:
    get:
      tags: ["分享"]
      summary: "获取分享信息"
      description: "根据分享代码获取文件或文本的详细信息"
      produces:
        - "application/json"
      parameters:
        - name: "code"
          in: "query"
          type: "string"
          required: true
          description: "分享代码"
      responses:
        200:
          description: "分享信息"
          schema:
            $ref: "#/definitions/ShareInfo"
        400:
          description: "请求参数错误"
          schema:
            $ref: "#/definitions/ErrorResponse"
        404:
          description: "分享代码不存在"
          schema:
            $ref: "#/definitions/ErrorResponse"
        410:
          description: "分享已过期"
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      tags: ["分享"]
      summary: "获取分享信息"
      description: "根据分享代码获取文件或文本的详细信息（POST方式）"
      consumes:
        - "application/json"
        - "multipart/form-data"
      produces:
        - "application/json"
      parameters:
        - name: "code"
          in: "formData"
          type: "string"
          required: true
          description: "分享代码"
      responses:
        200:
          description: "分享信息"
          schema:
            $ref: "#/definitions/ShareInfo"
        400:
          description: "请求参数错误"
          schema:
            $ref: "#/definitions/ErrorResponse"
        404:
          description: "分享代码不存在"
          schema:
            $ref: "#/definitions/ErrorResponse"

  /share/download:
    get:
      tags: ["分享"]
      summary: "下载分享文件"
      description: "根据分享代码下载文件或获取文本内容"
      produces:
        - "application/octet-stream"
        - "application/json"
      parameters:
        - name: "code"
          in: "query"
          type: "string"
          required: true
          description: "分享代码"
      responses:
        200:
          description: "文件下载或文本内容"
        400:
          description: "请求参数错误"
          schema:
            $ref: "#/definitions/ErrorResponse"
        401:
          description: "需要认证"
          schema:
            $ref: "#/definitions/ErrorResponse"
        404:
          description: "分享代码不存在"
          schema:
            $ref: "#/definitions/ErrorResponse"
        410:
          description: "分享已过期"
          schema:
            $ref: "#/definitions/ErrorResponse"

  # 分片上传接口
  /chunk/upload/init/:
    post:
      tags: ["分片上传"]
      summary: "初始化分片上传"
      description: "初始化文件分片上传，返回上传ID和分片信息"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "request"
          in: "body"
          required: true
          description: "上传初始化参数"
          schema:
            $ref: "#/definitions/ChunkInitRequest"
      responses:
        200:
          description: "初始化成功"
          schema:
            $ref: "#/definitions/ChunkInitResponse"
        400:
          description: "请求参数错误"
          schema:
            $ref: "#/definitions/ErrorResponse"
        413:
          description: "文件过大"
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "服务器内部错误"
          schema:
            $ref: "#/definitions/ErrorResponse"

  /chunk/upload/chunk/{upload_id}/{chunk_index}:
    post:
      tags: ["分片上传"]
      summary: "上传文件分片"
      description: "上传指定索引的文件分片"
      consumes:
        - "multipart/form-data"
      produces:
        - "application/json"
      parameters:
        - name: "upload_id"
          in: "path"
          type: "string"
          required: true
          description: "上传ID"
        - name: "chunk_index"
          in: "path"
          type: "integer"
          required: true
          description: "分片索引"
        - name: "chunk"
          in: "formData"
          type: "file"
          required: true
          description: "分片文件"
      responses:
        200:
          description: "上传成功"
          schema:
            $ref: "#/definitions/ChunkUploadResponse"
        400:
          description: "请求参数错误"
          schema:
            $ref: "#/definitions/ErrorResponse"
        404:
          description: "上传ID不存在"
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "服务器内部错误"
          schema:
            $ref: "#/definitions/ErrorResponse"

  /chunk/upload/complete/{upload_id}:
    post:
      tags: ["分片上传"]
      summary: "完成分片上传"
      description: "完成所有分片上传，合并文件并生成分享代码"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "upload_id"
          in: "path"
          type: "string"
          required: true
          description: "上传ID"
        - name: "request"
          in: "body"
          required: true
          description: "完成上传参数"
          schema:
            $ref: "#/definitions/ChunkCompleteRequest"
      responses:
        200:
          description: "上传完成"
          schema:
            $ref: "#/definitions/ShareResponse"
        400:
          description: "请求参数错误"
          schema:
            $ref: "#/definitions/ErrorResponse"
        404:
          description: "上传ID不存在"
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "服务器内部错误"
          schema:
            $ref: "#/definitions/ErrorResponse"

  /chunk/upload/status/{upload_id}:
    get:
      tags: ["分片上传"]
      summary: "获取上传状态"
      description: "获取分片上传的进度和状态"
      produces:
        - "application/json"
      parameters:
        - name: "upload_id"
          in: "path"
          type: "string"
          required: true
          description: "上传ID"
      responses:
        200:
          description: "上传状态"
          schema:
            $ref: "#/definitions/ChunkStatusResponse"
        404:
          description: "上传ID不存在"
          schema:
            $ref: "#/definitions/ErrorResponse"

  /chunk/upload/verify/{upload_id}/{chunk_index}:
    post:
      tags: ["分片上传"]
      summary: "校验分片"
      description: "用于断点续传场景，校验指定分片是否已存在"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "upload_id"
          in: "path"
          type: "string"
          required: true
          description: "上传ID"
        - name: "chunk_index"
          in: "path"
          type: "integer"
          required: true
          description: "分片索引"
        - name: "request"
          in: "body"
          required: true
          description: "分片校验参数"
          schema:
            $ref: "#/definitions/ChunkVerifyRequest"
      responses:
        200:
          description: "分片校验结果"
          schema:
            $ref: "#/definitions/ChunkVerifyResponse"
        404:
          description: "上传ID不存在"
          schema:
            $ref: "#/definitions/ErrorResponse"

  /chunk/upload/cancel/{upload_id}:
    delete:
      tags: ["分片上传"]
      summary: "取消分片上传"
      description: "取消分片上传并清理相关文件"
      produces:
        - "application/json"
      parameters:
        - name: "upload_id"
          in: "path"
          type: "string"
          required: true
          description: "上传ID"
      responses:
        200:
          description: "取消成功"
          schema:
            $ref: "#/definitions/SuccessResponse"
        404:
          description: "上传ID不存在"
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "服务器内部错误"
          schema:
            $ref: "#/definitions/ErrorResponse"

  # 用户接口
  /user/system-info:
    get:
      tags: ["用户"]
      summary: "获取用户系统状态"
      description: "返回用户系统开关、注册是否允许等信息"
      produces:
        - "application/json"
      responses:
        200:
          description: "用户系统信息"
          schema:
            $ref: "#/definitions/UserSystemInfoResponse"
        500:
          description: "服务器内部错误"
          schema:
            $ref: "#/definitions/ErrorResponse"

  /user/check-initialization:
    get:
      tags: ["用户"]
      summary: "检查系统是否已初始化"
      description: "与 /check-init 一致，为用户端兼容接口"
      produces:
        - "application/json"
      responses:
        200:
          description: "初始化状态"
          schema:
            $ref: "#/definitions/InitializationStatusResponse"
        500:
          description: "服务器内部错误"
          schema:
            $ref: "#/definitions/ErrorResponse"

  /user/register:
    post:
      tags: ["用户"]
      summary: "用户注册"
      description: "注册新用户账号"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "request"
          in: "body"
          required: true
          description: "注册信息"
          schema:
            $ref: "#/definitions/RegisterRequest"
      responses:
        200:
          description: "注册成功"
          schema:
            $ref: "#/definitions/UserResponse"
        400:
          description: "请求参数错误"
          schema:
            $ref: "#/definitions/ErrorResponse"
        409:
          description: "用户已存在"
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "服务器内部错误"
          schema:
            $ref: "#/definitions/ErrorResponse"

  /user/login:
    post:
      tags: ["用户"]
      summary: "用户登录"
      description: "用户登录认证"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "request"
          in: "body"
          required: true
          description: "登录信息"
          schema:
            $ref: "#/definitions/LoginRequest"
      responses:
        200:
          description: "登录成功"
          schema:
            $ref: "#/definitions/LoginResponse"
        400:
          description: "请求参数错误"
          schema:
            $ref: "#/definitions/ErrorResponse"
        401:
          description: "用户名或密码错误"
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "服务器内部错误"
          schema:
            $ref: "#/definitions/ErrorResponse"

  /user/logout:
    post:
      tags: ["用户"]
      summary: "用户退出"
      description: "用户退出登录"
      produces:
        - "application/json"
      security:
        - BearerAuth: []
      responses:
        200:
          description: "退出成功"
          schema:
            $ref: "#/definitions/SuccessResponse"
        401:
          description: "未认证"
          schema:
            $ref: "#/definitions/ErrorResponse"

  /user/profile:
    get:
      tags: ["用户"]
      summary: "获取用户信息"
      description: "获取当前用户的详细信息"
      produces:
        - "application/json"
      security:
        - BearerAuth: []
      responses:
        200:
          description: "用户信息"
          schema:
            $ref: "#/definitions/UserResponse"
        401:
          description: "未认证"
          schema:
            $ref: "#/definitions/ErrorResponse"
    put:
      tags: ["用户"]
      summary: "更新用户信息"
      description: "更新当前用户的信息"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "request"
          in: "body"
          required: true
          description: "用户信息"
          schema:
            $ref: "#/definitions/UpdateUserRequest"
      security:
        - BearerAuth: []
      responses:
        200:
          description: "更新成功"
          schema:
            $ref: "#/definitions/UserResponse"
        400:
          description: "请求参数错误"
          schema:
            $ref: "#/definitions/ErrorResponse"
        401:
          description: "未认证"
          schema:
            $ref: "#/definitions/ErrorResponse"

  /user/files:
    get:
      tags: ["用户"]
      summary: "获取用户文件列表"
      description: "获取当前用户上传的文件列表"
      produces:
        - "application/json"
      parameters:
        - name: "page"
          in: "query"
          type: "integer"
          default: 1
          description: "页码"
        - name: "limit"
          in: "query"
          type: "integer"
          default: 20
          description: "每页数量"
      security:
        - BearerAuth: []
      responses:
        200:
          description: "文件列表"
          schema:
            $ref: "#/definitions/FileListResponse"
        401:
          description: "未认证"
          schema:
            $ref: "#/definitions/ErrorResponse"

  # 管理员接口
  /admin/stats:
    get:
      tags: ["管理员"]
      summary: "获取系统统计"
      description: "获取系统统计信息"
      produces:
        - "application/json"
      security:
        - BearerAuth: []
      responses:
        200:
          description: "统计信息"
          schema:
            $ref: "#/definitions/AdminStatsResponse"
        401:
          description: "未认证"
          schema:
            $ref: "#/definitions/ErrorResponse"
        403:
          description: "权限不足"
          schema:
            $ref: "#/definitions/ErrorResponse"

  /admin/files:
    get:
      tags: ["管理员"]
      summary: "获取所有文件列表"
      description: "获取系统中所有文件的列表"
      produces:
        - "application/json"
      parameters:
        - name: "page"
          in: "query"
          type: "integer"
          default: 1
          description: "页码"
        - name: "limit"
          in: "query"
          type: "integer"
          default: 20
          description: "每页数量"
        - name: "search"
          in: "query"
          type: "string"
          description: "搜索关键词"
        - name: "sort"
          in: "query"
          type: "string"
          enum: ["created_at", "size", "used_count"]
          default: "created_at"
          description: "排序字段"
        - name: "order"
          in: "query"
          type: "string"
          enum: ["asc", "desc"]
          default: "desc"
          description: "排序方式"
      security:
        - BearerAuth: []
      responses:
        200:
          description: "文件列表"
          schema:
            $ref: "#/definitions/AdminFileListResponse"
        401:
          description: "未认证"
          schema:
            $ref: "#/definitions/ErrorResponse"
        403:
          description: "权限不足"
          schema:
            $ref: "#/definitions/ErrorResponse"

  /admin/files/{id}:
    delete:
      tags: ["管理员"]
      summary: "删除文件"
      description: "删除指定的文件"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          type: "integer"
          required: true
          description: "文件ID"
      security:
        - BearerAuth: []
      responses:
        200:
          description: "删除成功"
          schema:
            $ref: "#/definitions/SuccessResponse"
        401:
          description: "未认证"
          schema:
            $ref: "#/definitions/ErrorResponse"
        403:
          description: "权限不足"
          schema:
            $ref: "#/definitions/ErrorResponse"
        404:
          description: "文件不存在"
          schema:
            $ref: "#/definitions/ErrorResponse"

  /admin/config:
    get:
      tags: ["管理员"]
      summary: "获取系统配置"
      description: "获取完整的系统配置"
      produces:
        - "application/json"
      security:
        - BearerAuth: []
      responses:
        200:
          description: "系统配置"
          schema:
            $ref: "#/definitions/AdminConfigResponse"
        401:
          description: "未认证"
          schema:
            $ref: "#/definitions/ErrorResponse"
        403:
          description: "权限不足"
          schema:
            $ref: "#/definitions/ErrorResponse"
    put:
      tags: ["管理员"]
      summary: "更新系统配置"
      description: "更新系统配置"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "config"
          in: "body"
          required: true
          description: "配置信息"
          schema:
            $ref: "#/definitions/AdminConfigRequest"
      security:
        - BearerAuth: []
      responses:
        200:
          description: "更新成功"
          schema:
            $ref: "#/definitions/SuccessResponse"
        400:
          description: "请求参数错误"
          schema:
            $ref: "#/definitions/ErrorResponse"
        401:
          description: "未认证"
          schema:
            $ref: "#/definitions/ErrorResponse"
        403:
          description: "权限不足"
          schema:
            $ref: "#/definitions/ErrorResponse"

  # 存储管理接口
  /admin/storage/test:
    post:
      tags: ["存储"]
      summary: "测试存储连接"
      description: "测试指定存储配置的连接"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "config"
          in: "body"
          required: true
          description: "存储配置"
          schema:
            $ref: "#/definitions/StorageTestRequest"
      security:
        - BearerAuth: []
      responses:
        200:
          description: "测试成功"
          schema:
            $ref: "#/definitions/StorageTestResponse"
        400:
          description: "请求参数错误"
          schema:
            $ref: "#/definitions/ErrorResponse"
        401:
          description: "未认证"
          schema:
            $ref: "#/definitions/ErrorResponse"
        403:
          description: "权限不足"
          schema:
            $ref: "#/definitions/ErrorResponse"

  /admin/storage/switch:
    post:
      tags: ["存储"]
      summary: "切换存储方式"
      description: "切换到指定的存储方式"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "request"
          in: "body"
          required: true
          description: "存储切换请求"
          schema:
            $ref: "#/definitions/StorageSwitchRequest"
      security:
        - BearerAuth: []
      responses:
        200:
          description: "切换成功"
          schema:
            $ref: "#/definitions/SuccessResponse"
        400:
          description: "请求参数错误"
          schema:
            $ref: "#/definitions/ErrorResponse"
        401:
          description: "未认证"
          schema:
            $ref: "#/definitions/ErrorResponse"
        403:
          description: "权限不足"
          schema:
            $ref: "#/definitions/ErrorResponse"

definitions:
  # 通用响应
  SuccessResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        example: 200
      message:
        type: "string"
        example: "success"
      data:
        type: "object"

  ErrorResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        example: 400
      message:
        type: "string"
        example: "error message"
      error:
        type: "string"
        example: "detailed error"

  InitializationStatus:
    type: "object"
    properties:
      initialized:
        type: "boolean"
        description: "系统是否已经完成初始化"
        example: true

  InitializationStatusResponse:
    allOf:
      - $ref: "#/definitions/SuccessResponse"
      - type: "object"
        properties:
          data:
            $ref: "#/definitions/InitializationStatus"

  SetupDatabaseConfig:
    type: "object"
    required: ["type"]
    properties:
      type:
        type: "string"
        enum: ["sqlite", "mysql", "postgres"]
        description: "数据库类型"
      file:
        type: "string"
        description: "SQLite 数据库文件路径"
      host:
        type: "string"
        description: "数据库主机地址"
      port:
        type: "integer"
        description: "数据库端口"
        example: 3306
      user:
        type: "string"
        description: "数据库用户名"
      password:
        type: "string"
        description: "数据库密码"
      database:
        type: "string"
        description: "数据库名称"

  SetupAdminConfig:
    type: "object"
    required: ["username", "email", "password"]
    properties:
      username:
        type: "string"
        description: "管理员用户名"
        example: "admin"
      email:
        type: "string"
        format: "email"
        description: "管理员邮箱"
        example: "admin@example.com"
      nickname:
        type: "string"
        description: "管理员昵称"
      password:
        type: "string"
        format: "password"
        description: "管理员密码"
      confirm:
        type: "string"
        format: "password"
        description: "确认密码"
      allowUserRegistration:
        type: "boolean"
        description: "是否允许用户自助注册"

  SetupInitializeRequest:
    type: "object"
    required: ["database", "admin"]
    properties:
      database:
        $ref: "#/definitions/SetupDatabaseConfig"
      admin:
        $ref: "#/definitions/SetupAdminConfig"

  SetupInitializeData:
    type: "object"
    properties:
      message:
        type: "string"
        example: "系统初始化完成"
      username:
        type: "string"
        example: "admin"
      database_type:
        type: "string"
        example: "sqlite"

  SetupInitializeResponse:
    allOf:
      - $ref: "#/definitions/SuccessResponse"
      - type: "object"
        properties:
          data:
            $ref: "#/definitions/SetupInitializeData"

  UserSystemInfo:
    type: "object"
    properties:
      user_system_enabled:
        type: "integer"
        enum: [0, 1]
        description: "用户系统是否启用"
        example: 1
      allow_user_registration:
        type: "integer"
        enum: [0, 1]
        description: "是否允许用户注册"
        example: 1
      require_email_verification:
        type: "integer"
        enum: [0, 1]
        description: "是否需要邮箱验证"
        example: 0

  UserSystemInfoResponse:
    allOf:
      - $ref: "#/definitions/SuccessResponse"
      - type: "object"
        properties:
          data:
            $ref: "#/definitions/UserSystemInfo"

  # 系统配置
  SystemConfig:
    type: "object"
    properties:
      name:
        type: "string"
        description: "站点名称"
      description:
        type: "string"
        description: "站点描述"
      uploadSize:
        type: "integer"
        description: "最大上传大小(MB)"
      enableChunk:
        type: "integer"
        description: "是否启用分片上传"
      openUpload:
        type: "boolean"
        description: "是否开放上传"
      expireStyle:
        type: "array"
        items:
          type: "string"
        description: "过期时间选项"

  # 分享相关
  ShareResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        example: 200
      message:
        type: "string"
        example: "success"
      data:
        type: "object"
        properties:
          code:
            type: "string"
            description: "分享代码"
          download_url:
            type: "string"
            description: "下载URL"
          share_url:
            type: "string"
            description: "分享URL"
          expired_at:
            type: "string"
            format: "date-time"
            description: "过期时间"

  ShareInfo:
    type: "object"
    properties:
      code:
        type: "integer"
        example: 200
      message:
        type: "string"
        example: "success"
      data:
        type: "object"
        properties:
          code:
            type: "string"
            description: "分享代码"
          type:
            type: "string"
            enum: ["text", "file"]
            description: "分享类型"
          filename:
            type: "string"
            description: "文件名（文件类型时）"
          size:
            type: "integer"
            description: "文件大小（文件类型时）"
          text:
            type: "string"
            description: "文本内容（文本类型时）"
          expired_at:
            type: "string"
            format: "date-time"
            description: "过期时间"
          used_count:
            type: "integer"
            description: "已使用次数"
          expired_count:
            type: "integer"
            description: "最大使用次数"
          require_auth:
            type: "boolean"
            description: "是否需要认证"

  # 分片上传相关
  ChunkInitRequest:
    type: "object"
    required: ["filename", "filesize", "chunk_size"]
    properties:
      filename:
        type: "string"
        description: "文件名"
      filesize:
        type: "integer"
        description: "文件总大小"
      chunk_size:
        type: "integer"
        description: "分片大小"
      file_hash:
        type: "string"
        description: "文件哈希（可选，用于秒传）"
      expire_value:
        type: "integer"
        default: 1
        description: "过期值"
      expire_style:
        type: "string"
        enum: ["minute", "hour", "day", "week", "month", "year", "forever"]
        default: "day"
        description: "过期样式"
      require_auth:
        type: "boolean"
        default: false
        description: "是否需要认证"

  ChunkInitResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        example: 200
      message:
        type: "string"
        example: "success"
      data:
        type: "object"
        properties:
          upload_id:
            type: "string"
            description: "上传ID"
          total_chunks:
            type: "integer"
            description: "总分片数"
          chunk_size:
            type: "integer"
            description: "分片大小"
          uploaded_chunks:
            type: "array"
            items:
              type: "integer"
            description: "已上传的分片索引"
          existing_file:
            type: "boolean"
            description: "文件是否已存在（秒传）"

  ChunkUploadResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        example: 200
      message:
        type: "string"
        example: "success"
      data:
        type: "object"
        properties:
          chunk_index:
            type: "integer"
            description: "分片索引"
          chunk_hash:
            type: "string"
            description: "分片哈希"
          progress:
            type: "number"
            description: "上传进度(0-100)"

  ChunkCompleteRequest:
    type: "object"
    required: ["filename"]
    properties:
      filename:
        type: "string"
        description: "最终文件名"
      expire_value:
        type: "integer"
        default: 1
        description: "过期值"
      expire_style:
        type: "string"
        enum: ["minute", "hour", "day", "week", "month", "year", "forever"]
        default: "day"
        description: "过期样式"
      require_auth:
        type: "boolean"
        default: false
        description: "是否需要认证"

  ChunkStatusResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        example: 200
      message:
        type: "string"
        example: "success"
      data:
        type: "object"
        properties:
          upload_id:
            type: "string"
            description: "上传ID"
          progress:
            type: "number"
            description: "上传进度(0-100)"
          total_chunks:
            type: "integer"
            description: "总分片数"
          uploaded_chunks:
            type: "integer"
            description: "已上传分片数"
          status:
            type: "string"
            enum: ["pending", "uploading", "completed", "failed"]
            description: "上传状态"

  ChunkVerifyRequest:
    type: "object"
    required: ["chunk_hash"]
    properties:
      chunk_hash:
        type: "string"
        description: "客户端计算的分片哈希"
        example: "9b74c9897bac770ffc029102a200c5de"

  ChunkVerifyResult:
    type: "object"
    properties:
      valid:
        type: "boolean"
        description: "分片是否已存在"
        example: true

  ChunkVerifyResponse:
    allOf:
      - $ref: "#/definitions/SuccessResponse"
      - type: "object"
        properties:
          data:
            $ref: "#/definitions/ChunkVerifyResult"

  # 用户相关
  RegisterRequest:
    type: "object"
    required: ["username", "email", "password"]
    properties:
      username:
        type: "string"
        minLength: 3
        maxLength: 50
        description: "用户名"
      email:
        type: "string"
        format: "email"
        description: "邮箱地址"
      password:
        type: "string"
        minLength: 6
        description: "密码"
      nickname:
        type: "string"
        maxLength: 50
        description: "昵称"

  LoginRequest:
    type: "object"
    required: ["username", "password"]
    properties:
      username:
        type: "string"
        description: "用户名或邮箱"
      password:
        type: "string"
        description: "密码"

  LoginResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        example: 200
      message:
        type: "string"
        example: "success"
      data:
        type: "object"
        properties:
          token:
            type: "string"
            description: "认证令牌"
          user:
            $ref: "#/definitions/User"

  UserResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        example: 200
      message:
        type: "string"
        example: "success"
      data:
        $ref: "#/definitions/User"

  User:
    type: "object"
    properties:
      id:
        type: "integer"
        description: "用户ID"
      username:
        type: "string"
        description: "用户名"
      email:
        type: "string"
        description: "邮箱地址"
      nickname:
        type: "string"
        description: "昵称"
      avatar:
        type: "string"
        description: "头像URL"
      role:
        type: "string"
        enum: ["admin", "user"]
        description: "用户角色"
      status:
        type: "string"
        enum: ["active", "inactive", "banned"]
        description: "用户状态"
      total_uploads:
        type: "integer"
        description: "总上传次数"
      total_downloads:
        type: "integer"
        description: "总下载次数"
      total_storage:
        type: "integer"
        description: "总存储大小"
      created_at:
        type: "string"
        format: "date-time"
        description: "创建时间"

  UpdateUserRequest:
    type: "object"
    properties:
      nickname:
        type: "string"
        maxLength: 50
        description: "昵称"
      avatar:
        type: "string"
        description: "头像URL"
      email:
        type: "string"
        format: "email"
        description: "邮箱地址"

  FileListResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        example: 200
      message:
        type: "string"
        example: "success"
      data:
        type: "object"
        properties:
          files:
            type: "array"
            items:
              $ref: "#/definitions/FileItem"
          pagination:
            $ref: "#/definitions/Pagination"

  FileItem:
    type: "object"
    properties:
      id:
        type: "integer"
        description: "文件ID"
      code:
        type: "string"
        description: "分享代码"
      filename:
        type: "string"
        description: "文件名"
      size:
        type: "integer"
        description: "文件大小"
      type:
        type: "string"
        enum: ["text", "file"]
        description: "类型"
      used_count:
        type: "integer"
        description: "使用次数"
      expired_count:
        type: "integer"
        description: "过期次数"
      expired_at:
        type: "string"
        format: "date-time"
        description: "过期时间"
      created_at:
        type: "string"
        format: "date-time"
        description: "创建时间"

  # 管理员相关
  AdminStatsResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        example: 200
      message:
        type: "string"
        example: "success"
      data:
        type: "object"
        properties:
          total_files:
            type: "integer"
            description: "总文件数"
          total_users:
            type: "integer"
            description: "总用户数"
          total_storage:
            type: "integer"
            description: "总存储大小"
          total_downloads:
            type: "integer"
            description: "总下载次数"
          active_shares:
            type: "integer"
            description: "活跃分享数"
          expired_shares:
            type: "integer"
            description: "过期分享数"

  AdminFileListResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        example: 200
      message:
        type: "string"
        example: "success"
      data:
        type: "object"
        properties:
          files:
            type: "array"
            items:
              $ref: "#/definitions/AdminFileItem"
          pagination:
            $ref: "#/definitions/Pagination"

  AdminFileItem:
    type: "object"
    properties:
      id:
        type: "integer"
        description: "文件ID"
      code:
        type: "string"
        description: "分享代码"
      filename:
        type: "string"
        description: "文件名"
      size:
        type: "integer"
        description: "文件大小"
      type:
        type: "string"
        enum: ["text", "file"]
        description: "类型"
      used_count:
        type: "integer"
        description: "使用次数"
      expired_count:
        type: "integer"
        description: "过期次数"
      expired_at:
        type: "string"
        format: "date-time"
        description: "过期时间"
      user_id:
        type: "integer"
        description: "上传用户ID"
      username:
        type: "string"
        description: "上传用户名"
      owner_ip:
        type: "string"
        description: "上传者IP"
      created_at:
        type: "string"
        format: "date-time"
        description: "创建时间"

  AdminConfigResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        example: 200
      message:
        type: "string"
        example: "success"
      data:
        type: "object"
        description: "完整的系统配置"

  AdminConfigRequest:
    type: "object"
    description: "系统配置更新请求"

  # 存储相关
  StorageTestRequest:
    type: "object"
    required: ["storage_type"]
    properties:
      storage_type:
        type: "string"
        enum: ["local", "s3", "webdav", "onedrive"]
        description: "存储类型"
      config:
        type: "object"
        description: "存储配置参数"

  StorageTestResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        example: 200
      message:
        type: "string"
        example: "success"
      data:
        type: "object"
        properties:
          status:
            type: "string"
            enum: ["success", "failed"]
            description: "测试状态"
          message:
            type: "string"
            description: "测试结果信息"
          latency:
            type: "integer"
            description: "响应延迟(ms)"

  StorageSwitchRequest:
    type: "object"
    required: ["storage_type"]
    properties:
      storage_type:
        type: "string"
        enum: ["local", "s3", "webdav", "onedrive"]
        description: "目标存储类型"
      migrate_data:
        type: "boolean"
        default: false
        description: "是否迁移现有数据"

  # 通用分页
  Pagination:
    type: "object"
    properties:
      page:
        type: "integer"
        description: "当前页码"
      limit:
        type: "integer"
        description: "每页数量"
      total:
        type: "integer"
        description: "总数量"
      pages:
        type: "integer"
        description: "总页数"
